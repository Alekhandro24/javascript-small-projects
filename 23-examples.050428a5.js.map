{"mappings":"AA6HA,MAAMA,OACJC,YAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,IAAMA,CACb,EAIF,MAAME,KAAO,IAAIL,OAAO,OAAQ,IAE1BM,IAAM,IAAIN,OAAO,MAAO,IAqUxBO,cAAgBC,SAASC,cAAc,QACvCC,SAAWF,SAASC,cAAc,cAQxC,SAASE,aACP,OAAOC,MAAM,8CAA8CC,MAAKC,IAC9D,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAI,GAExB,CAEA,SAASC,eAAeC,GACtB,MAAMC,EAASD,EACZE,KAAIC,GACI,mCACeA,EAAKrB,wCACJqB,EAAKC,2CACHD,EAAKE,QAAQvB,yCACdqB,EAAKG,6BAG9BC,KAAK,IACRjB,SAASkB,UAAYP,EACrBX,SAASmB,MAAMC,QAAU,OACzBpB,SAASmB,MAAME,IAAM,OACrBrB,SAASmB,MAAMG,gBAAkB,MACnC,CA9BAzB,cAAc0B,iBAAiB,SAAS,KACtCtB,aACGE,MAAKO,GAASD,eAAeC,KAC7Bc,OAAMC,GAASC,QAAQC,IAAIF,IAAA,IAwDhC,MAAMG,UAAY9B,SAAS+B,eAAe,aACpCC,eAAiBhC,SAAS+B,eAAe,WAI/C,SAASE,wBAEPD,eAAeE,MAAQJ,UAAUI,KACnC,CALAJ,UAAUL,iBAAiB,QAASQ","sources":["src/js/23-examples.js"],"sourcesContent":["// 1. Question: check string has valid parentheses ?\n// ‚úîÔ∏èOpen brackets must be closed by same type of brackets\n\n// ‚úîÔ∏èOpen Brackets must be closed in correct order\n\n// Implementation approach üëáüëá\n\n// ‚úîÔ∏èarr is an array where we push (‚Äò(‚Äò, ‚Äò{‚Äò, [‚Äò)\n// ‚úîÔ∏èarr[arr.length - 1] checks for the last element in the array.\n// ‚úîÔ∏èwhen the char = ‚Äú)‚Äùand if the last element in the array (stack) matches with the opposite of ‚Äú(‚Äú, then pop the element.\n// ‚úîÔ∏èif the stack has no char left in the array, then the string is valid.\n\n// function isValid(str) {\n//   let brackets = {\n//     '}': '{',\n//     ']': '[',\n//     ')': '(',\n//   };\n\n//   let arr = [];\n\n//   for (let i = 0; i < str.length; i++) {\n//     console.log(str);\n//     if (str[i] === '}' || str[i] === ']' || str[i] === ')') {\n//       arr.push(str[i]);\n//     } else {\n//       if (arr[arr.length - 1] === brackets[str[i]]) {\n//         arr.pop();\n//       } else return false;\n//     }\n//   }\n//   return arr.length === 0 ? true : false;\n// }\n\n// console.log(isValid('()')); //true\n// console.log(isValid('(}})')); //false\n// console.log(isValid('({[]})')); //true\n\n// 2. Find duplicates in Array\n// const arr = [1, 8, 4, 8, 1, 2, 3, 5, 6, 5];\n\n// function findDuplicates(arr) {\n//   return arr.filter(\n//     (currentValue, currentIndex) => arr.indexOf(currentValue) !== currentIndex\n//   );\n// }\n// console.log(findDuplicates(arr)); //[8, 1, 5]\n\n// //3.// ‚úîÔ∏èCreate a new array and push the unique values in it.\n// // ‚úîÔ∏èLoop through the array and check if the element is present in the new array.\n\n// const arr2 = [1, 8, 4, 8, 1, 2, 3, 5, 6, 5];\n\n// function uniqueValues(arr) {\n//   let newArr = [];\n//   for (let i = 0; i < arr.length; i++) {\n//     if (newArr.indexOf(arr[i]) === -1) {\n//       newArr.push(arr[i]);\n//     }\n//   }\n//   return newArr;\n// }\n// console.log(uniqueValues(arr2)); //¬†[1, 8, 4, 2, 3, 5, 6]\n\n// 4. Write a util function that can format string like this(replace capital letter with whiteSpace)\n//let create a util function that will format string with regular expression\n\n// function replaceCamelWithSpace(name) {\n//   return name.replace(/\\B([A-Z])\\B/g, ' $1');\n// }\n\n// console.log(replaceCamelWithSpace('ali'));\n// console.log(replaceCamelWithSpace('aliKate'));\n// console.log(replaceCamelWithSpace('aliKatePara'));\n\n//5 find the largest element\n//if n=2 => result should be 300\n//if n=1 => result should be 500\n\n// const data = [100, 200, 500, 300, 5, 1];\n\n// function getLargestNumber(n) {\n//   const sortedData = data.sort((a, b) => a - b);\n//   console.log(sortedData);\n//   const length = sortedData.length;\n//   console.log(length);\n//   return sortedData[length - n];\n// }\n\n// console.log(getLargestNumber(6));\n\n//6 Class\n\n//----1\n//   class Company {\n//   constructor(name, country) {\n//     this.name = name;\n//     this.country = country;\n//   }\n// }\n\n// const tesla = new Company('Tesla', 'USA');\n// const honda = new Company('Honda', 'Japan');\n\n// console.log(tesla.country);\n// console.log(honda.country);\n\n//----2\n// class Person {\n//   constructor(name, surname) {\n//     this.name = name;\n//     this.surname = surname;\n//   }\n//   getFullName() {\n//     return this.name + ' ' + this.surname;\n//   }\n// }\n\n// const adam = new Person('Adam', 'USA');\n\n// console.log(adam.name);\n// console.log(adam.surname);\n// console.log(adam.getFullName());\n\n//----3 Class instatiation - what does it mean?\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n/*generating an object from a class is called class instantiation*/\n\nconst adam = new Person('Adam', 15);\n/*adam object is an instance of Person class */\nconst eve = new Person('Eve', 18);\n/*adam instance of Personclass */\n\n//----4\n// class Car {\n//   constructor(emoji, speed) {\n//     this.emoji = emoji;\n//     this.speed = speed;\n//   }\n//   addToPage() {\n//     let marquee = document.createElement('MARQUEE');\n//     marquee.innerText = this.emoji;\n//     marquee.scrollAmount = this.speed;\n//     document.body.appendChild(marquee);\n//   }\n// }\n\n// const automobile = new Car('üöó', 3);\n// automobile.addToPage();\n\n// const fireEngine = new Car('üöí', 6);\n// fireEngine.addToPage();\n\n// const policeCar = new Car('üöì\t', 5);\n// policeCar.addToPage();\n\n// const truck = new Car('üöö\t', 4);\n// truck.addToPage();\n\n// const bus = new Car('üöå', 2);\n// bus.addToPage();\n\n//----5 What is tupeof for a class\n// class Circle {\n//   constructor(radius) {\n//     this.radius = radius;\n//   }\n//   getarea() {\n//     return Math.PI * this.radius ** 2;\n//   }\n// }\n// console.log(typeof Circle); // function\n\n// // Let's use it\n// const circle1 = new Circle(4);\n// console.log(circle1.getarea()); //50.26548245743669\n// console.log(circle1); // object\n\n//----6 class constructor default values\n// class Player {\n//   constructor(name, points = 0) {\n//     this.name = name;\n//     this.points = points;\n//   }\n// }\n\n// const tatum = new Player('Tatum', 600);\n// const curry = new Player('Curry', 850);\n// const me = new Player('Ali');\n// console.log(tatum.points);\n// console.log(curry.points);\n// console.log(me.points);\n\n// //----7 class  super keyword\n// class Person1 {\n//   constructor(name, age) {\n//     this.name = name;\n//     this.age = age;\n//   }\n// }\n\n// class footballer extends Person1 {\n//   constructor(name, age, position) {\n//     super(name, age);\n//     this.position = position;\n//   }\n// }\n\n// const bale = new footballer('Gareth Bale', 33, 'Right Winger');\n// console.log('age', bale.age);\n// console.log('name', bale.name);\n// console.log('position', bale.position);\n\n//----8 class  super keyword2\n\n// class Person2 {\n//   constructor(name, age) {\n//     this.name = name;\n//     this.age = age;\n//   }\n// }\n// class FootBaller2 extends Person2 {\n//   constructor(name, age, position) {\n//     super(name, age);\n//     this.position = position;\n//   }\n// }\n// console.log(new FootBaller2('Lionel', 35, 'Forward'));\n\n// class President extends Person2 {\n//   constructor(name, age, country) {\n//     super(name, age);\n//     this.country = country;\n//   }\n// }\n// console.log(new President('Recep', 68, 'Turkiye'));\n\n//----9 static property in a class\n\n// class Fruit {\n//   static count = 0;\n//   constructor() {\n//     Fruit.count++;\n//   }\n// }\n// const apple = new Fruit();\n// const pear = new Fruit();\n\n// console.log('Fruit.count', Fruit.count);\n\n//----10 static method2 in a class\n// class Car2 {\n//   constructor(name, price) {\n//     this.name = name;\n//     this.price = price;\n//   }\n//   static comparePrice(a, b) {\n//     if (a.price > b.price) {\n//       return `${a.name} costs more`;\n//     } else if (b.price > a.price) {\n//       return `${b.name} costs more`;\n//     } else return `both same price`;\n//   }\n// }\n\n// const audi = new Car2('Audi', 11);\n// const tata = new Car2('Tata', 9);\n// const togg = new Car2('Togg', 9);\n// //togg is an object\n// console.log('Car.com', Car2.comparePrice(tata, togg));\n// //static belongs to class not to object\n\n//----11 calling a static method\n// class Person3 {\n//   constructor(name, age) {\n//     this.name - name;\n//     this.age = age;\n//   }\n//   static compareAges(person1, person2) {\n//     if (person1.age == person2.age) return true;\n//     return false;\n//   }\n// }\n\n// const alil = new Person3('Many', 81);\n// const lea = new Person3('Bruce', 20);\n\n// console.log(Person3.compareAges(alil, lea));\n\n//----12\n// class Vehicle {\n//   hasEngine = true;\n// }\n\n// class Bus extends Vehicle {}\n\n// class Boat extends Vehicle {}\n\n// const a = new Bus();\n// console.log('a.hasEngine', a.hasEngine);\n\n// const b = new Boat();\n// console.log('b.hasEngine', b.hasEngine);\n\n//-------------13\n// const p1 = new Promise(function () {\n//   //pending\n//   //fulfilled\n//   //rejected\n// });\n// console.log('p1', p1);\n\n// const p2 = new Promise((resolve, reject) => {\n//   fetch('https://api.itgid.info/api/delay')\n//     .then(res => {\n//       // console.log('res', res);\n//       if (res.ok) resolve(res.json());\n//       else reject(res);\n//     })\n//     .catch(error => reject(error));\n// });\n// console.log('p2', p2);\n\n// p2.then(f1, f2);\n\n// function f1(data) {\n//   console.log('p2', p2);\n//   console.log('success');\n//   console.log('data', data);\n// }\n// function f2() {\n//   console.log('p2', p2);\n//   console.log('problem');\n//   console.log('data', data);\n// }\n\n// console.log('p2', p2);\n// console.log('======');\n\n//////////////\n// const f = fetch('https://api.itgid.info/api/test');\n// console.log('f', f);\n// f.then(res => res.json()).then(data => console.log('data', data));\n\n// fetch('https://api.itgid.info/api/delay')\n//   .then(res => {\n//     // console.log('res', res);\n//     return res.json();\n//   })\n//   .then(data => {\n//     console.log('data', data);\n//     return fetch('https://api.itgid.info/api/test');\n//   })\n//   .then(res => res.json())\n//   .then(data => console.log('data', data));\n\n//////////////\n// const API_KEY = '6b76ab7dc1d4a505';\n// const requestHeaders = new Headers();\n// requestHeaders.append('apikey', API_KEY);\n\n// fetch('https://api.itgid.info/api/27/random/random-number?min=1&max=10', {\n//   headers: requestHeaders,\n// })\n//   .then(res => res.json())\n//   .then(data => {\n//     console.log('res.data', data);\n//     return fetch(\n//       'https://api.itgid.info/api/27/employee/read/' +\n//         data[('random-number', { headers: requestHeaders })]\n//     );\n//   })\n//   .then(res => res.json())\n//   .then(data => console.log('data', data));\n\n//PromiseAll\n\n// const promise_3 = new Promise((resolve, reject) => {\n//   fetch('https://api.itgid.info/api/test').then(data => resolve(data.json()));\n// });\n\n// const promise_4 = new Promise((resolve, reject) => {\n//   fetch('https://api.itgid.info/api/delay').then(data => resolve(data.json()));\n// });\n\n// Promise.all([promise_3, promise_4]).then(data => {\n//   console.log('data', data);\n// });\n\n//-----------14. Fetch countries\n\n// fetch('https://restcountries.com/v3.1/all')\n//   .then(res => res.json())\n//   .then(data => showInfo(data));\n\n// function showInfo(countries) {\n//   countries.sort((country1, country2) => {\n//     country1 = country1.name.common;\n//     country2 = country2.name.common;\n//     if (country1 < country2) {\n//       return -1;\n//     } else if (country1 > country2) {\n//       return 1;\n//     }\n//     return 0;\n//   });\n//   for (let i = 0; i < 10; i++) {\n//     console.log('country', countries[i].name.common);\n//   }\n// }\n\n// const b = [4, 5, 8, 9, 6, 3, 2];\n// b.sort((a, b) => a - b);\n// console.log('b', b);\n\n//-----------15. Fetch countries\n// let countries = ['USA', 'Ukraine', 'Great BritaIn', 'Italy', 'Spain', 'Greece'];\n\n// countries.sort();\n// countries.forEach(function (item) {\n//   let opt = document.createElement('option');\n//   opt.text = item;\n//   opt.value = item;\n//   slctCoiuntries.appendChild(opt);\n// });\n\n// //-----------15.1 => JS filtering in an api response with textbox\n// fetch('https://jsonplaceholder.typicode.com/users')\n//   .then(res => res.json())\n//   .then(users => showUsers(users));\n\n// function showUsers(users) {\n//   const ul = document.createElement('ul');\n//   for (let user of users) {\n//     const li = document.createElement('li');\n//     li.innerText = user.name;\n//     ul.appendChild(li);\n//   }\n//   result.appendChild(ul);\n// }\n// textBox.oninput = filterUsers;\n\n// function filterUsers() {\n//   const liElements = document.querySelectorAll('li');\n//   for (let li of liElements) {\n//     const currentName = li.innerText.toLowerCase();\n//     const searchText = this.value.toLowerCase();\n\n//     if (!currentName.includes(searchText)) {\n//       li.setAttribute('hidden', true);\n//     } else li.removeAttribute('hidden');\n//   }\n// }\n\n// //-----------15.2\nconst fetchUsersBtn = document.querySelector('.btn');\nconst userList = document.querySelector('.user-list');\n\nfetchUsersBtn.addEventListener('click', () => {\n  fetchUsers()\n    .then(users => renderUserList(users))\n    .catch(error => console.log(error));\n});\n\nfunction fetchUsers() {\n  return fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\nfunction renderUserList(users) {\n  const markup = users\n    .map(user => {\n      return `<li>\n          <p><b>Name</b>: ${user.name}</p>\n          <p><b>Email</b>: ${user.email}</p>\n          <p><b>Company</b>: ${user.company.name}</p>\n          <p ><b>Phone</b>: ${user.phone}</p>\n        </li>`;\n    })\n    .join('');\n  userList.innerHTML = markup;\n  userList.style.padding = '24px';\n  userList.style.gap = '25px';\n  userList.style.backgroundColor = '#fff';\n}\n\n//-----------16. Some method for array\n// const nestedArray = [1, [2, 3], [4, [5, 6]]];\n\n// const flattened = nestedArray.flat(1);\n// console.log('flattened', flattened); //[1, 2, 3, 4, Array(2)]\n\n//-----------17.radio buttons\n// let radios = document.getElementsByName('color');\n\n// for (let i = 0; i < radios.length; i++) {\n//   radios[i].onclick = function () {\n//     let target = document.body;\n//     target.style.backgroundColor = radios[i].value;\n//   };\n// }\n\n//-----------17.1\n// const people = document.getElementById('people');\n// const choosenPeople = document.getElementById('choosenPeople');\n\n// people.addEventListener('click', changeTextBoxText);\n\n// function changeTextBoxText() {\n//   choosenPeople.value = this.value;\n// }\n\n//-----------17.2\nconst countries = document.getElementById('countries');\nconst countryCapital = document.getElementById('capital');\n\ncountries.addEventListener('click', choosenCountryCapital);\n\nfunction choosenCountryCapital() {\n  // countryCapital.value = this.value;\n  countryCapital.value = countries.value;\n}\n\n// //-----------18. –ó–∞–¥–∞—á—ñ –Ω–∞ JavaScript —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ - —á–∏—Å–ª–æ–≤–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å, –¥–µ –∫–æ–∂–Ω–µ –Ω–∞—Å—Ç—É–ø–Ω–µ —á–∏—Å–ª–æ, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 3-–≥–æ, == —Å—É–º—ñ –¥–≤–æ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö\n\n// const fib = e => {\n//   if (e <= 1) {\n//     return e;\n//   } else {\n//     return fib(e - 1) + fib(e - 2);\n//   }\n// };\n// console.log('fib', fib(3));\n\n// 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610\n\n//-----------19 –ß–∏—Å–ª–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç—É —Ç–∞ –¥–æ–¥–∞—Ç–∏\n// function squareSum(numbers) {\n//   let mas = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     let num = numbers[i] * numbers[i];\n//     mas.push(num);\n//     console.log('num', num);\n//   }\n//   let sum = mas.reduce((a, b) => a + b);\n//   console.log('sum', sum);\n// }\n\n// squareSum([2, 4]); // 20\n// squareSum([3, 4, 5]); // 50\n// squareSum([5, 6, 7]); // 110\n\n// function squareSum(numbers) {\n//   return numbers\n//     .map(item => (item *= item))\n//     .reduce((sum, counter) => sum + counter);\n// }\n// console.log(squareSum([2, 4])); // 20\n\n//-----------20 How To Solve This Apple Coding Interview Question With Recursion\n\n// const str = 'hello';\n\n// function solution(str) {\n//   //base case\n//   if (str.length === 0) return '';\n\n//   //recursion\n//   return str[str.length - 1] + solution(str.slice(0, str.length - 1));\n// }\n// console.log(solution(str));\n\n//-----------21\n// let species = ['Animals', 'Vegetables'];\n// let animals = ['Lion', 'Cow', 'Horse', 'Turtle'];\n// let vegetables = ['Cucumber', 'Pukin', 'Potato', 'Tomato'];\n\n// let slct1 = document.getElementById('slct1');\n// let slct2 = document.getElementById('slct2');\n\n// species.forEach(function addSpecies(item) {\n//   let option = document.createElement('option');\n//   option.text = item;\n//   option.value = item;\n//   slct1.appendChild(option);\n// });\n\n// slct1.onchange = function () {\n//   slct2.innerHTML = '<option></option>';\n//   if (this.value === 'Animals') {\n//     addToSlct2(animals);\n//   }\n//   if (this.value === 'Vegetables') {\n//     addToSlct2(vegetables);\n//   }\n// };\n\n// function addToSlct2(arr) {\n//   arr.forEach(function (item) {\n//     let option = document.createElement('option');\n//     option.text = item;\n//     option.text = item;\n//     slct2.appendChild(option);\n//   });\n// }\n\n//-----------22 Object\n//Partial Shallow Copy, Shallow Copy, Deep Copy\n\n// const person = {\n//   name: 'Adam',\n//   friends: ['Can', 'Atin'],\n// };\n\n// //Shallow Copy\n// const sc = person;\n// console.log('sc', sc);\n\n// //Partial Shallow Copy\n// const psc = { ...person };\n// console.log('psc', psc);\n\n// // Deep Copy\n// dc = JSON.parse(JSON.stringify(person));\n// console.log('dc', dc);\n\n// //testing\n\n// person.name = 'Buscan';\n// console.log('person.name', person.name); //person.name Buscan\n// console.log('sc.name', sc.name); //sc.name Buscan\n// console.log('psc.name', psc.name); //psc.name Adam\n// console.log('dc.name', dc.name); //dc.name Adam\n\n// person.friends.push('Ali');\n// console.log('person.friends', person.friends); //['Can', 'Atin', 'Ali']\n// console.log('sc.friends', sc.friends); //['Can', 'Atin', 'Ali']\n// console.log('psc.friends', psc.friends); //['Can', 'Atin', 'Ali']\n// console.log('dc.friends', dc.friends); //['Can', 'Atin']\n\n////*---2  const a = {\n//   test: { t: '11' },\n// };\n\n// const b = structuredClone(a);\n// b.test.t = '22';\n// console.log('a', a.test.t);\n// console.log('b', b.test.t);\n\n////*---3\n//shallow copy object\n\n// const object = { name: 'Ali' };\n// const newObject = object;\n// object.name = 'Eva';\n// console.log('object', object); // {name: 'Eva'}\n// console.log('newObject', newObject); //{name: 'Eva'}\n\n// //deep object\n// const obj = { name: 'Anna', surname: 'Evalin' };\n// const newObj = { ...obj };\n// obj.name = 'Eva';\n// console.log('obj', obj); // {name: 'Eva', surname: 'Evalin'}\n// console.log('newObj', newObj); //{name: 'Anna', surname: 'Evalin'}\n\n// obj.lastname = 'Clarson';\n// console.log('obj', obj); //{name: 'Eva', surname: 'Evalin', lastname: 'Clarson'}\n// console.log('newObj', newObj); //{name: 'Anna', surname: 'Evalin'}\n\n////*---4 array\n//shallow copy\n// const array = ['Adam'];\n// const newArray = array;\n// array[0] = 'Eva';\n// console.log('array', array); //['Eva']\n// console.log('newArray', newArray); //['Eva']\n\n// //deep\n// const arr = ['Adam'];\n// const newArr = [...arr];\n// arr[0] = 'Eva';\n// arr.push('Lin');\n// console.log('arr', arr); //['Eva', 'Lin'];\n// console.log('newArr', newArr); //['Adam'];\n\n// -----------\n// const animal = ['1', '2', '3'];\n// const copy = animal.slice();\n// copy.fill('7');\n// console.log('copy', copy); //['7', '7', '7']\n// console.log('animal', animal); //¬†['1', '2', '3']\n\n// copy.push('9');\n// console.log('copy', copy); //['7', '7', '7', '9']\n// console.log('animal', animal); //¬†['1', '2', '3']\n\n// const wrongCopy = animal;\n// wrongCopy.fill('8');\n// console.log('wrongCopy', wrongCopy); //¬†['8', '8', '8']\n// console.log('animals', animal); //¬†['8', '8', '8']\n\n// ------- copyWithin =>  target, start, end\n// const e = ['7', '7', '9', '8', '10', '10', '11', '11'];\n// e.copyWithin(0, 2, 4);\n// //target, start => (until)end\n// console.log('e', e); //['9', '8', '9', '8', '10', '10', '11', '11']\n\n// const flo = ['1', '2', '3', '4'];\n// // flo.copyWithin(1, 0);\n// // // copy index 0 to index 1\n// // console.log('flo', flo); //['1', '1', '2'];\n\n// // flo.copyWithin(2, 0);\n// // //copy index 0 to index 2\n// // console.log('flo', flo); // ['1', '2', '1', '2']\n\n// flo.copyWithin(0, 2, 4);\n// console.log('flo', flo); //['3', '4', '3', '4']\n\n// ------- with\n// const bc = ['1', '2', '3'];\n// //indexes    0    1    2\n// const ad = bc.with(1, '4');\n// console.log('bc', bc);\n// console.log('ad', ad);\n\n// ------- fill => value,start,end\n// const adc = ['1', '2', '3', '5', '6'];\n// //indexes     0    1    2\n// adc.fill('4');\n// console.log('adc', adc); //¬†['4', '4', '4', '4', '4']\n\n// adc.fill('4', 1); //from index 1\n// console.log('adc', adc); //¬†['1', '4', '4', '4', '4']\n\n// adc.fill('4', 0, 3); //from 0 until 3\n// console.log('adc', adc); // ['4', '4', '4', '5', '6']\n\n//-----------23\n// let month = 1;\n\n// switch (month) {\n//   case 1:\n//   case 2:\n//   case 12:\n//     console.log('Winter');\n//     break;\n//   case 3:\n//   case 4:\n//   case 5:\n//     console.log('Spring');\n//     break;\n//   case 6:\n//   case 7:\n//   case 8:\n//     console.log('Summer');\n//     break;\n//   case 9:\n//   case 10:\n//   case 11:\n//     console.log('Autumn');\n//     break;\n\n//   default:\n//     console.log('error', error);\n// }\n\n//-----------24 –ù–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤ –≤ JavaScript\n// const numbers = [5, 8, 1, 3, 4, 7, 9];\n\n//sort && toSorted\n//change\n// const sorted = numbers.sort((a, b) => a - b);\n// console.log('sorted', sorted); //[1, 3, 4, 5, 7, 8, 9]\n// console.log('numbers', numbers); //[1, 3, 4, 5, 7, 8, 9]\n\n//doesn't change original array\n// const sortedNumbers = numbers.toSorted((a, b) => a - b);\n// console.log('sortedNumbers', sortedNumbers);//[1, 3, 4, 5, 7, 8, 9]\n// console.log('numbers', numbers);//[5, 8, 1, 3, 4, 7, 9]\n\n//revers && toReversed\n//change\n// const reversed = numbers.reverse();\n// console.log('reversed', reversed); //[9, 7, 4, 3, 1, 8, 5]\n// console.log('numbers', numbers); //[9, 7, 4, 3, 1, 8, 5]\n\n//doesn't change original array\n// const reversedNumbers = numbers.toReversed();\n// console.log('reversedNumbers', reversedNumbers);//[9, 7, 4, 3, 1, 8, 5]\n// console.log('numbers', numbers);//[5, 8, 1, 3, 4, 7, 9]\n\n//splice && toSpliced\n//change\n// const spliced = numbers.splice(2, 2);\n// console.log('spliced', spliced); //[1, 3]\n// console.log('numbers', numbers); //[5, 8, 4, 7, 9]\n\n//doesn't change original array\n// const splicedNumbers = numbers.toSpliced(2, 2);\n// console.log('splicedNumbers', splicedNumbers); //[5, 8, 4, 7, 9]\n// console.log('numbers', numbers); //[5, 8, 1, 3, 4, 7, 9]\n\n//with\n// const replaceWithNumbers = numbers.with(3, 6);\n// console.log('replaceWithNumbers', replaceWithNumbers); //[5, 8, 1, 6, 4, 7, 9]\n// console.log('numbers', numbers); //[5, 8, 1, 3, 4, 7, 9]\n\n//-----------25 —Ñ—É—Ç–µ—Ä –∑–∞–≤–∂–¥–∏ –∑–Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏\n\n//-----------26. Interview Question\n// const nums = [2, 7, 11, 15];\n// const target = 9;\n\n// function solution(nums, target) {\n//   let map = new Map();\n//   console.log('Map ', Map);\n\n//   for (let i = 0; i < nums.length; i++) {\n//     let compliment = target - nums[i];\n//     console.log('compliment ', compliment);\n\n//     if (map.has(compliment)) {\n//       console.log('i ', i);\n//       console.log('compliment ', compliment);\n//       return [i, map.get(compliment)];\n//     } else {\n//       map.set(nums[i], i);\n//       console.log('nums[i] ', nums[i]);\n//     }\n//   }\n// }\n\n// console.log(solution(nums, target));\n\n//-----------27.Generate & Download QR Code in HTML and JavaScript\n// const input = document.querySelector('input');\n// const qrImage = document.querySelector('img');\n// const generateBtn = document.querySelector('#generate');\n// const downloadBtn = document.querySelector('#download');\n\n// generateBtn.addEventListener('click', () => {\n//   const qrCode = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${input.value}`;\n//   qrImage.src = qrCode;\n// });\n\n// downloadBtn.addEventListener('click', async () => {\n//   const res = await fetch(qrImage.src);\n//   const blob = await res.blob();\n//   const downloadLink = document.createElement('a');\n//   downloadLink.href = URL.createObjectURL(blob);\n//   downloadLink.download = 'qrcode.jpg';\n//   downloadLink.click();\n// });\n\n//-----------28 –ü—Ä–æ—î–∫—Ç—É—î–º–æ2-—á –≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –≤ html —Å—Ç–æ—Ä—ñ–Ω–∫—É\n// let gameZona = document.querySelector('.gameZone');\n\n// let mas = [\n//   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n//   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n//   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n// ];\n\n// for (let x = 0; x < mas.length; x++) {\n//   for (let y = 0; y < mas[x].length; y++) {\n//     if (mas[x][y] === 1) {\n//       mas[x][y] = document.createElement('div');\n//       mas[x][y].classList.add('brick');\n//     }\n//     if (mas[x][y] === 0) {\n//       mas[x][y] = document.createElement('div');\n//       mas[x][y].classList.add('brick2');\n//     }\n//     gameZona.appendChild(mas[x][y]);\n//   }\n// }\n\n//-----------28 Pick Color From Image in JavaScript\n// const button = document.querySelector('button');\n\n// const pickColor = async () => {\n//   const eyeDropper = new EyeDropper();\n\n//   const { sRGBHex } = await eyeDropper.open();\n//   console.log('sRGBHex ', sRGBHex);\n// };\n\n// button.addEventListener('click', pickColor);\n\n//-----------29 –Ñ - —Ü—ñ–Ω–∞ –Ω–∞ —Ü—É–∫–µ—Ä–∫–∏(1–∫–≥). –í–∏–≤–µ—Å—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å 2,3 –¥–æ 10–∫–≥ —Ü—É–∫–µ—Ä–æ–∫\n\n// const bonBon = document.querySelector('.bonBon');\n\n// let cost = 200;\n\n// for (let i = 1; i <= 10; i++) {\n//   console.log('cost*i', cost * i);\n//   let bonDiv = document.createElement('p');\n//   bonDiv.textContent = `–¶—ñ–Ω–∞ –∑–∞ ${i} –∫–≥ —Ü—É–∫–µ—Ä–æ–∫ = ${cost * i} –≥—Ä–Ω`;\n//   bonBon.appendChild(bonDiv);\n// }\n\n//-------------30 Mastering JavaScript Set - add, delete, check the present of elements\n//1.\n// const data = new Set();\n// for (let i = 0; i < 9999; i++) {\n//   data.add('A');\n// }\n\n// data.add(45);\n\n// console.log('data.size: ', data.size);\n// console.log('data: ', data);\n\n//2. adding element\n// const fruits = new Set();\n// fruits.add('apple');\n// console.log('fruits: ', fruits); //fruits:  Set(1)¬†{'apple'}\n// fruits.add('melon');\n// console.log('fruits: ', fruits); //fruits:  Set(2) {'apple', 'melon'}\n\n//3.deleting element\n// const cars = new Set(['Porche', 'Mazda']);\n// console.log('cars: ', cars);\n// cars.delete('Mazda');\n// console.log('cars: ', cars);\n// cars.delete('Porche');\n// console.log('cars: ', cars); // Set(0)¬†{size: 0}\n\n//4. cheking if a value exist in the Set\n// const cars = new Set(['Porche', 'Mazda', 'Toyota']);\n// console.log('cars', cars.has('Porche'));\n// console.log('cars', cars.has('Toyota'));\n// console.log('cars', cars.has('Nissan'));\n\n//5. iterating over the elements of Set\n// const cars = new Set(['Porche', 'Mazda', 'Toyota']);\n// for (const car of cars) {\n//   console.log('car-for', car);\n// }\n\n// cars.forEach(car => {\n//   console.log('car-forEach', car);\n// });\n\n//6. remove duplicates from an Array with the Spread Operator and Set\n// const arr = [1, 1, 5, 4, 2, 6, 5];\n// // const uniqueArr = new Set(arr);\n// // console.log('uniqueArr: ', uniqueArr);//Set(5)¬†{1, 5, 4, 2, 6} object\n// const uniqueArr = [...new Set(arr)];\n// console.log('uniqueArr: ', uniqueArr); //[1, 5, 4, 2, 6] Array\n\n//7. ...spread and Set\n// const a = [1, 2, 1];\n// const b = [2, 1, 2];\n// const c = [...a, ...b];\n// console.log('c: ', c); //////[1, 2, 1, 2, 1, 2]\n// const d = [...new Set(c)];\n// console.log('d: ', d); //////[1, 2];\n// const e = [...new Set(a), ...new Set(b)];\n// console.log('e: ', e); //////[ [1, 2, 2, 1]\n// const f = [...new Set(a, b)];\n// console.log('f: ', f); //////[¬†[1, 2]\n\n//8. Set stores only unique elements\n// const cars = new Set();\n// cars.add('Mazda');\n// console.log('cars: ', cars); //Set(1)¬†{'Mazda'}\n// cars.add('Porche');\n// console.log('cars: ', cars); //Set(2)¬†{'Mazda', 'Porche'}\n// cars.add('Porche');\n// console.log('cars: ', cars); //Set(2)¬†{'Mazda', 'Porche'}\n\n//9. length of array & size of a Set\n// const a = ['A', 'B', 'B'];\n// console.log('a.length: ', a.length); //a.length:  3\n\n// const b = new Set(a);\n// console.log('b.size: ', b.size); //b.size:  2\n\n// const c = new Set(['A', 'B', 'B']);\n// console.log('c.size: ', c.size); //c.size:  2\n\n// //-------------31 INCLUDES mas.includes(98 - —â–æ —à—É–∫–∞—î–º–æ, 4 - –∑ —è–∫–æ–≥–æ —ñ–Ω–¥–µ–∫—Å–∞)\n// const mas = [1, 3, 4, 98, 37, 44];\n// console.log(mas.includes(98)); //true\n// console.log(mas.includes(98, 4)); //false\n\n//-------------32 group anagrams together\n\n// const groupAnagrams = function (strs) {\n//   let ordered = strs.map(str => str.split('').sort().join(''));\n\n//   let map = {};\n\n//   for (let i = 0; i < strs.length; i++) {\n//     if (!map[ordered[i]]) {\n//       map[ordered[i]] = [strs[i]];\n//     } else {\n//       map[ordered[i]].push[strs[i]];\n//       console.log('first', ordered[i]);\n//       console.log('second', strs[i]);\n//     }\n//   }\n\n//   return Object.values(map);\n// };\n\n// // ----str.split(''));\n// // (3) ['e', 'a', 't']\n// // (3) ['t', 'e', 'a']\n// // (3) ['t', 'a', 'n']\n// // (3) ['a', 't', 'e']\n// // (3) ['n', 'a', 't']\n// // (3) ['b', 'a', 't']\n// // ----- str.split('').sort())\n// // (3) ['a', 'e', 't']\n// // (3) ['a', 'e', 't']\n// // (3) ['a', 'n', 't']\n// // (3) ['a', 'e', 't']\n// // (3) ['a', 'n', 't']\n// // (3) ['a', 'b', 't']\n// // ---- str.split('').sort().join(''))\n// // ['aet', 'aet', 'ant', 'aet', 'ant', 'abt']\n\n// let input = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'];\n// let output = groupAnagrams(input);\n// console.log('output:', output); // [[\"eat\", \"tea\",\"ate\"]][[\"tan,\"nat\"\"]][[\"bat\"]]\n\n// // ['eat']\n// // ['tan']\n// // ['bat']\n\n// // let input2 = ['listen', 'silent', 'elbow', 'below', 'car', 'arc'];\n// // let output2 = groupAnagrams(input2);\n// // console.log('output:', output2); // [[\"listen\", \"silent\"]][[\"elbow,\"below\"\"]][[ \"car\",\"arc\"]]\n\n//-------------33\n\n// for(let i=0; i< 100; i++){\n//     if(i % 3 === 0 && i % 5 === 0){\n//         console.log(\"fizzbizz\")\n//     };\n//     if(i % 3 === 0){console.log(\"fizz\");}\n//         if(i % 5 === 0){\n//             console.log(\"bizz\")\n//         }else{\n//             console.log(i)\n//         }\n\n// };\n\n////\n"],"names":["Person","constructor","name","age","this","adam","eve","fetchUsersBtn","document","querySelector","userList","fetchUsers","fetch","then","response","ok","Error","status","json","renderUserList","users","markup","map","user","email","company","phone","join","innerHTML","style","padding","gap","backgroundColor","addEventListener","catch","error","console","log","countries","getElementById","countryCapital","choosenCountryCapital","value"],"version":3,"file":"23-examples.050428a5.js.map"}