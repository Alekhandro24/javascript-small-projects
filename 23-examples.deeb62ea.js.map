{"mappings":"AA+EA,MAAMA,KAAO,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,GAErC,SAASC,iBAAiBC,GACxB,MAAMC,EAAaH,KAAKI,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAC3CC,QAAQC,IAAIL,GACZ,MAAMM,EAASN,EAAWM,OAE1B,OADAF,QAAQC,IAAIC,GACLN,EAAWM,EAASP,EAC7B,CAEAK,QAAQC,IAAIP,iBAAiB","sources":["src/js/23-examples.js"],"sourcesContent":["// 1. Question: check string has valid parentheses ?\n// ✔️Open brackets must be closed by same type of brackets\n\n// ✔️Open Brackets must be closed in correct order\n\n// Implementation approach 👇👇\n\n// ✔️arr is an array where we push (‘(‘, ‘{‘, [‘)\n// ✔️arr[arr.length - 1] checks for the last element in the array.\n// ✔️when the char = “)”and if the last element in the array (stack) matches with the opposite of “(“, then pop the element.\n// ✔️if the stack has no char left in the array, then the string is valid.\n\n// function isValid(str) {\n//   let brackets = {\n//     '}': '{',\n//     ']': '[',\n//     ')': '(',\n//   };\n\n//   let arr = [];\n\n//   for (let i = 0; i < str.length; i++) {\n//     console.log(str);\n//     if (str[i] === '}' || str[i] === ']' || str[i] === ')') {\n//       arr.push(str[i]);\n//     } else {\n//       if (arr[arr.length - 1] === brackets[str[i]]) {\n//         arr.pop();\n//       } else return false;\n//     }\n//   }\n//   return arr.length === 0 ? true : false;\n// }\n\n// console.log(isValid('()')); //true\n// console.log(isValid('(}})')); //false\n// console.log(isValid('({[]})')); //true\n\n// 2. Find duplicates in Array\n// const arr = [1, 8, 4, 8, 1, 2, 3, 5, 6, 5];\n\n// function findDuplicates(arr) {\n//   return arr.filter(\n//     (currentValue, currentIndex) => arr.indexOf(currentValue) !== currentIndex\n//   );\n// }\n// console.log(findDuplicates(arr)); //[8, 1, 5]\n\n// //3.// ✔️Create a new array and push the unique values in it.\n// // ✔️Loop through the array and check if the element is present in the new array.\n\n// const arr2 = [1, 8, 4, 8, 1, 2, 3, 5, 6, 5];\n\n// function uniqueValues(arr) {\n//   let newArr = [];\n//   for (let i = 0; i < arr.length; i++) {\n//     if (newArr.indexOf(arr[i]) === -1) {\n//       newArr.push(arr[i]);\n//     }\n//   }\n//   return newArr;\n// }\n// console.log(uniqueValues(arr2)); // [1, 8, 4, 2, 3, 5, 6]\n\n// 4. Write a util function that can format string like this(replace capital letter with whiteSpace)\n//let create a util function that will format string with regular expression\n\n// function replaceCamelWithSpace(name) {\n//   return name.replace(/\\B([A-Z])\\B/g, ' $1');\n// }\n\n// console.log(replaceCamelWithSpace('ali'));\n// console.log(replaceCamelWithSpace('aliKate'));\n// console.log(replaceCamelWithSpace('aliKatePara'));\n\n//5 find the largest element\n//if n=2 => result should be 300\n//if n=1 => result should be 500\n\nconst data = [100, 200, 500, 300, 5, 1];\n\nfunction getLargestNumber(n) {\n  const sortedData = data.sort((a, b) => a - b);\n  console.log(sortedData);\n  const length = sortedData.length;\n  console.log(length);\n  return sortedData[length - n];\n}\n\nconsole.log(getLargestNumber(6));\n"],"names":["data","getLargestNumber","n","sortedData","sort","a","b","console","log","length"],"version":3,"file":"23-examples.deeb62ea.js.map"}