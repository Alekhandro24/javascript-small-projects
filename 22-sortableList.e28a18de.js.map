{"mappings":"AA6BA,MAAMA,aAAeC,SAASC,cAAc,kBACtCC,MAAQH,aAAaI,iBAAiB,SAE5CD,MAAME,SAAQC,IACZA,EAAKC,iBAAiB,aAAa,KAEjCC,YAAW,IAAMF,EAAKG,UAAUC,IAAI,aAAa,MAGnDJ,EAAKC,iBAAiB,WAAW,IAAMD,EAAKG,UAAUE,OAAO,iBAG/D,MAAMC,gBAAkBC,IACtBA,EAAEC,iBACF,MAAMC,EAAed,SAASC,cAAc,aAE5C,IAGIc,EAHW,IAAIhB,aAAaI,iBAAiB,yBAGtBa,MAAKC,GACvBL,EAAEM,SAAWD,EAAQE,UAAYF,EAAQG,aAAe,IAIjErB,aAAasB,aAAaP,EAAcC,EAAA,EAG1ChB,aAAaO,iBAAiB,WAAYK,iBAC1CZ,aAAaO,iBAAiB,aAAaM,GAAKA,EAAEC","sources":["src/js/22-sortableList.js"],"sourcesContent":["// const sortableList = document.querySelector('.sortable-list');\n// const items = sortableList.querySelectorAll('.item');\n\n// items.forEach(item => {\n//   item.addEventListener('dragstart', () => {\n//     // Adding dragging class to item after a delay\n//     setTimeout(() => item.classList.add('dragging'), 0);\n//   });\n//   // Removing dragging class from item on dragend event\n//   item.addEventListener('dragend', () => item.classList.remove('dragging'));\n// });\n\n// const iniSortableList = e => {\n//   e.preventDefault();\n//   const draggingItem = document.querySelector('dragging');\n//   // Getting all items except currently dragging and making array of them\n//   let siblings = [...sortableList.querySelectorAll('.item:not(.dragging')];\n\n//   // Finding the sibling after which the dragging item should be placed\n//   let nextSibling = siblings.find(sibling => {\n//     return e.clientY <= sibling.offsetTop + sibling.offsetHeight / 2;\n//   });\n//   // Inserting the dragging item before the found sibling\n//   sortableList.insertBefore(draggingItem, nextSibling);\n// };\n\n// sortableList.addEventListener('dragover', iniSortableList);\n// sortableList.addEventListener('dragonter', e => e.preventDefault());\n\nconst sortableList = document.querySelector('.sortable-list');\nconst items = sortableList.querySelectorAll('.item');\n\nitems.forEach(item => {\n  item.addEventListener('dragstart', () => {\n    // Adding dragging class to item after a delay\n    setTimeout(() => item.classList.add('dragging'), 0);\n  });\n  // Removing dragging class from item on dragend event\n  item.addEventListener('dragend', () => item.classList.remove('dragging'));\n});\n\nconst iniSortableList = e => {\n  e.preventDefault();\n  const draggingItem = document.querySelector('.dragging');\n  // Getting all items except currently dragging and making array of them\n  let siblings = [...sortableList.querySelectorAll('.item:not(.dragging)')];\n\n  // Finding the sibling after which the dragging item should be placed\n  let nextSibling = siblings.find(sibling => {\n    return e.clientY <= sibling.offsetTop + sibling.offsetHeight / 2;\n  });\n\n  // Inserting the dragging item before the found sibling\n  sortableList.insertBefore(draggingItem, nextSibling);\n};\n\nsortableList.addEventListener('dragover', iniSortableList);\nsortableList.addEventListener('dragenter', e => e.preventDefault());\n"],"names":["sortableList","document","querySelector","items","querySelectorAll","forEach","item","addEventListener","setTimeout","classList","add","remove","iniSortableList","e","preventDefault","draggingItem","nextSibling","find","sibling","clientY","offsetTop","offsetHeight","insertBefore"],"version":3,"file":"22-sortableList.e28a18de.js.map"}