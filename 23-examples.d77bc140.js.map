{"mappings":"AA6HA,MAAMA,OACJC,YAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,IAAMA,CACb,EAIF,MAAME,KAAO,IAAIL,OAAO,OAAQ,IAE1BM,IAAM,IAAIN,OAAO,MAAO,IAgK9B,MAAMO,QACJC,WAAY,EAGd,MAAMC,YAAYF,SAElB,MAAMG,aAAaH,SAEnB,MAAMI,EAAI,IAAIF,IACdG,QAAQC,IAAI,cAAeF,EAAEH,WAE7B,MAAMM,EAAI,IAAIJ,KACdE,QAAQC,IAAI,cAAeC,EAAEN","sources":["src/js/23-examples.js"],"sourcesContent":["// 1. Question: check string has valid parentheses ?\n// ‚úîÔ∏èOpen brackets must be closed by same type of brackets\n\n// ‚úîÔ∏èOpen Brackets must be closed in correct order\n\n// Implementation approach üëáüëá\n\n// ‚úîÔ∏èarr is an array where we push (‚Äò(‚Äò, ‚Äò{‚Äò, [‚Äò)\n// ‚úîÔ∏èarr[arr.length - 1] checks for the last element in the array.\n// ‚úîÔ∏èwhen the char = ‚Äú)‚Äùand if the last element in the array (stack) matches with the opposite of ‚Äú(‚Äú, then pop the element.\n// ‚úîÔ∏èif the stack has no char left in the array, then the string is valid.\n\n// function isValid(str) {\n//   let brackets = {\n//     '}': '{',\n//     ']': '[',\n//     ')': '(',\n//   };\n\n//   let arr = [];\n\n//   for (let i = 0; i < str.length; i++) {\n//     console.log(str);\n//     if (str[i] === '}' || str[i] === ']' || str[i] === ')') {\n//       arr.push(str[i]);\n//     } else {\n//       if (arr[arr.length - 1] === brackets[str[i]]) {\n//         arr.pop();\n//       } else return false;\n//     }\n//   }\n//   return arr.length === 0 ? true : false;\n// }\n\n// console.log(isValid('()')); //true\n// console.log(isValid('(}})')); //false\n// console.log(isValid('({[]})')); //true\n\n// 2. Find duplicates in Array\n// const arr = [1, 8, 4, 8, 1, 2, 3, 5, 6, 5];\n\n// function findDuplicates(arr) {\n//   return arr.filter(\n//     (currentValue, currentIndex) => arr.indexOf(currentValue) !== currentIndex\n//   );\n// }\n// console.log(findDuplicates(arr)); //[8, 1, 5]\n\n// //3.// ‚úîÔ∏èCreate a new array and push the unique values in it.\n// // ‚úîÔ∏èLoop through the array and check if the element is present in the new array.\n\n// const arr2 = [1, 8, 4, 8, 1, 2, 3, 5, 6, 5];\n\n// function uniqueValues(arr) {\n//   let newArr = [];\n//   for (let i = 0; i < arr.length; i++) {\n//     if (newArr.indexOf(arr[i]) === -1) {\n//       newArr.push(arr[i]);\n//     }\n//   }\n//   return newArr;\n// }\n// console.log(uniqueValues(arr2)); //¬†[1, 8, 4, 2, 3, 5, 6]\n\n// 4. Write a util function that can format string like this(replace capital letter with whiteSpace)\n//let create a util function that will format string with regular expression\n\n// function replaceCamelWithSpace(name) {\n//   return name.replace(/\\B([A-Z])\\B/g, ' $1');\n// }\n\n// console.log(replaceCamelWithSpace('ali'));\n// console.log(replaceCamelWithSpace('aliKate'));\n// console.log(replaceCamelWithSpace('aliKatePara'));\n\n//5 find the largest element\n//if n=2 => result should be 300\n//if n=1 => result should be 500\n\n// const data = [100, 200, 500, 300, 5, 1];\n\n// function getLargestNumber(n) {\n//   const sortedData = data.sort((a, b) => a - b);\n//   console.log(sortedData);\n//   const length = sortedData.length;\n//   console.log(length);\n//   return sortedData[length - n];\n// }\n\n// console.log(getLargestNumber(6));\n\n//6 Class\n\n//----1\n//   class Company {\n//   constructor(name, country) {\n//     this.name = name;\n//     this.country = country;\n//   }\n// }\n\n// const tesla = new Company('Tesla', 'USA');\n// const honda = new Company('Honda', 'Japan');\n\n// console.log(tesla.country);\n// console.log(honda.country);\n\n//----2\n// class Person {\n//   constructor(name, surname) {\n//     this.name = name;\n//     this.surname = surname;\n//   }\n//   getFullName() {\n//     return this.name + ' ' + this.surname;\n//   }\n// }\n\n// const adam = new Person('Adam', 'USA');\n\n// console.log(adam.name);\n// console.log(adam.surname);\n// console.log(adam.getFullName());\n\n//----3 Class instatiation - what does it mean?\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n/*generating an object from a class is called class instantiation*/\n\nconst adam = new Person('Adam', 15);\n/*adam object is an instance of Person class */\nconst eve = new Person('Eve', 18);\n/*adam instance of Personclass */\n\n//----4\n// class Car {\n//   constructor(emoji, speed) {\n//     this.emoji = emoji;\n//     this.speed = speed;\n//   }\n//   addToPage() {\n//     let marquee = document.createElement('MARQUEE');\n//     marquee.innerText = this.emoji;\n//     marquee.scrollAmount = this.speed;\n//     document.body.appendChild(marquee);\n//   }\n// }\n\n// const automobile = new Car('üöó', 3);\n// automobile.addToPage();\n\n// const fireEngine = new Car('üöí', 6);\n// fireEngine.addToPage();\n\n// const policeCar = new Car('üöì\t', 5);\n// policeCar.addToPage();\n\n// const truck = new Car('üöö\t', 4);\n// truck.addToPage();\n\n// const bus = new Car('üöå', 2);\n// bus.addToPage();\n\n//----5 What is tupeof for a class\n// class Circle {\n//   constructor(radius) {\n//     this.radius = radius;\n//   }\n//   getarea() {\n//     return Math.PI * this.radius ** 2;\n//   }\n// }\n// console.log(typeof Circle); // function\n\n// // Let's use it\n// const circle1 = new Circle(4);\n// console.log(circle1.getarea()); //50.26548245743669\n// console.log(circle1); // object\n\n//----6 class constructor default values\n// class Player {\n//   constructor(name, points = 0) {\n//     this.name = name;\n//     this.points = points;\n//   }\n// }\n\n// const tatum = new Player('Tatum', 600);\n// const curry = new Player('Curry', 850);\n// const me = new Player('Ali');\n// console.log(tatum.points);\n// console.log(curry.points);\n// console.log(me.points);\n\n// //----7 class  super keyword\n// class Person1 {\n//   constructor(name, age) {\n//     this.name = name;\n//     this.age = age;\n//   }\n// }\n\n// class footballer extends Person1 {\n//   constructor(name, age, position) {\n//     super(name, age);\n//     this.position = position;\n//   }\n// }\n\n// const bale = new footballer('Gareth Bale', 33, 'Right Winger');\n// console.log('age', bale.age);\n// console.log('name', bale.name);\n// console.log('position', bale.position);\n\n//----8 class  super keyword2\n\n// class Person2 {\n//   constructor(name, age) {\n//     this.name = name;\n//     this.age = age;\n//   }\n// }\n// class FootBaller2 extends Person2 {\n//   constructor(name, age, position) {\n//     super(name, age);\n//     this.position = position;\n//   }\n// }\n// console.log(new FootBaller2('Lionel', 35, 'Forward'));\n\n// class President extends Person2 {\n//   constructor(name, age, country) {\n//     super(name, age);\n//     this.country = country;\n//   }\n// }\n// console.log(new President('Recep', 68, 'Turkiye'));\n\n//----9 static property in a class\n\n// class Fruit {\n//   static count = 0;\n//   constructor() {\n//     Fruit.count++;\n//   }\n// }\n// const apple = new Fruit();\n// const pear = new Fruit();\n\n// console.log('Fruit.count', Fruit.count);\n\n//----10 static method2 in a class\n// class Car2 {\n//   constructor(name, price) {\n//     this.name = name;\n//     this.price = price;\n//   }\n//   static comparePrice(a, b) {\n//     if (a.price > b.price) {\n//       return `${a.name} costs more`;\n//     } else if (b.price > a.price) {\n//       return `${b.name} costs more`;\n//     } else return `both same price`;\n//   }\n// }\n\n// const audi = new Car2('Audi', 11);\n// const tata = new Car2('Tata', 9);\n// const togg = new Car2('Togg', 9);\n// //togg is an object\n// console.log('Car.com', Car2.comparePrice(tata, togg));\n// //static belongs to class not to object\n\n//----11 calling a static method\n// class Person3 {\n//   constructor(name, age) {\n//     this.name - name;\n//     this.age = age;\n//   }\n//   static compareAges(person1, person2) {\n//     if (person1.age == person2.age) return true;\n//     return false;\n//   }\n// }\n\n// const alil = new Person3('Many', 81);\n// const lea = new Person3('Bruce', 20);\n\n// console.log(Person3.compareAges(alil, lea));\n\n//----12\nclass Vehicle {\n  hasEngine = true;\n}\n\nclass Bus extends Vehicle {}\n\nclass Boat extends Vehicle {}\n\nconst a = new Bus();\nconsole.log('a.hasEngine', a.hasEngine);\n\nconst b = new Boat();\nconsole.log('b.hasEngine', b.hasEngine);\n"],"names":["Person","constructor","name","age","this","adam","eve","Vehicle","hasEngine","Bus","Boat","a","console","log","b"],"version":3,"file":"23-examples.d77bc140.js.map"}